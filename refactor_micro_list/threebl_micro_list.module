<?php
function threebl_micro_list_menu()
{
    $items = array();

    $items['admin/list-form'] = array(
        'title'            => 'Add Custom Email Lists',
        'description'      => 'Add Custom Email Lists from',
        'page callback'    => 'fnManageListForm',
        'access callback'  => true,
        'access arguments' => array('administer users'),
        'type'             => MENU_CALLBACK,
    );

    $items['admin/3bl_micro_list'] = array(
        'title'            => '3BL Micro Lists',
        'description'      => '3BL Micro Lists',
        'page callback'    => 'fnViewEmailList',
        'page arguments'   => array(2, 3),
        'access callback'  => true,
        'access arguments' => array('administer users'),
        'type'             => MENU_CALLBACK,

    );

    $items['admin/client_micro_list'] = array(
        'title'            => 'Client Micro Lists',
        'description'      => 'Client Micro Lists',
        'page callback'    => 'fnViewEmailList',
        'page arguments'   => array(2, 3),
        'access callback'  => true,
        'access arguments' => array('administer users'),
        'type'             => MENU_CALLBACK,

    );

    $items['admin/delete/email'] = array(
        'title'            => 'Remove Subscribers',
        'description'      => 'Remove  Subscribers',
        'page callback'    => 'fnDeleteEmail',
        'page arguments'   => array(3, 4),
        'access callback'  => true,
        'access arguments' => array('administer users'),
        'type'             => MENU_CALLBACK,
    );

    $items['admin/add/email'] = array(
        'title'            => 'Add Subscribers',
        'description'      => 'Add Subscribers',
        'page callback'    => 'fnAddEmailByAdmin',
        'page arguments'   => array(3),
        'access callback'  => true,
        'access arguments' => array('administer users'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/ClientMicroList'] = array(
        'title'            => 'Custom Email Lists',
        'description'      => 'Custom Email Lists',
        'page callback'    => 'fnClientMicroList',
        'page arguments'   => array(),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    //custom-list-form
    $items['Dashboard/ClientMicroList/Form'] = array(
        'title'            => 'Add Subscribers',
        'description'      => 'Add Subscribers',
        'page callback'    => 'fnManageClientListForm',
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    //custom-delete-list
    $items['Dashboard/ClientMicroList/delete'] = array(
        'title'            => 'Remove Custom Email Lists',
        'description'      => 'Remove Custom Email Lists',
        'page callback'    => 'fnDeleteClientList',
        'page arguments'   => array(3),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    //custom-add-email
    $items['Dashboard/SubscriberList/add'] = array(
        'title'            => 'Add Subscribers',
        'description'      => 'Add Subscribers',
        'page callback'    => 'fnAddEmailByClient',
        'page arguments'   => array(3),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    //custom-email-list
    $items['Dashboard/SubscriberList'] = array(
        'title'            => 'Subscribers List',
        'description'      => 'Subscribers List',
        'page callback'    => 'fnClientEmailList',
        'page arguments'   => array(2),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/ClientMicroList/edit'] = array(
        'title'            => 'Edit Custom Email Lists',
        'description'      => 'Edit Custom Email Lists',
        'page callback'    => 'fnManageClientListForm',
        'page arguments'   => array(3),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/custom-email-send'] = array(
        'title'            => 'Cron For Sending FMR Emails',
        'description'      => 'Cron For Sending FMR Emails',
        'page callback'    => 'fnDistributeFMRToCustomList',
        'page arguments'   => array(1),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    $items['sample-excel-download'] = array(
        'title'            => 'Download excel or CSV file',
        'description'      => 'Download excel or CSV file',
        'page callback'    => 'fnDownloadSampleEmailList',
        'page arguments'   => array(1),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/3blMicroList'] = array(
        'title'            => '3BL micro list for custom email list',
        'description'      => '3BL micro list for custom email list',
        'page callback'    => 'fn3BLMicroList',
        'page arguments'   => array(1),
        'access arguments' => array('administer users'),
        'type'             => MENU_CALLBACK,
    );
    $items['Dashboard/custom-list-ajax'] = array(
        'title'            => 'Ajax pagination for client micro list',
        'description'      => 'Ajax pagination for client micro list',
        'page callback'    => 'fnCustomListAjax',
        'page arguments'   => array(1),
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/micro-list-admin-ajax'] = array(
        'title'            => 'Getting All Active Client',
        'description'      => 'Getting All Active Client',
        'page callback'    => 'fnActiveClientAjax',
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/get-client-micro-lists-ajax'] = array(
        'title'            => 'Getting All Active Client',
        'description'      => 'Getting All Active Client',
        'page callback'    => 'fnGetClientMicroListsAjax',
        'access arguments' => array('dashboard analytics'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/Tracking-FMR-Updates'] = array(
        'title'            => 'Track for fmr',
        'description'      => 'Track for fmr',
        'page callback'    => 'fnTrackFmr',
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
    );
    $items['Tracking-FMR-Updates'] = array(
        'title'            => 'Track for fmr',
        'description'      => 'Track for fmr',
        'page callback'    => 'fnTrackFmr',
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
    );

    $items['Dashboard/Tracking-FMR-clicks'] = array(
        'title'            => 'Track FMR clicks',
        'description'      => 'Track FMR Clicks',
        'page callback'    => 'fnTrackFmrClicks',
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
    );
    $items['Tracking-FMR-clicks'] = array(
        'title'            => 'Track FMR clicks',
        'description'      => 'Track FMR Clicks',
        'page callback'    => 'fnTrackFmrClicks',
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
    );
    $items['admin/3BL-Micro-List-Report'] = array(
        'title' => '3BL Micro List Report',
        'description' => 'Track 3BL Micro list report',
        'page callback' => 'fnGetMicroListReport',
        'page arguments'   => array(1),
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/Client-Micro-List-Report'] = array(
        'title'            => 'Client Micro List Report',
        'description'      => 'Track Client Micro list report',
        'page callback'    => 'fnGetMicroListReport',
        'page arguments'   => array(1),
        'access arguments' => array('administer users'),
        'type'             => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Hook for theme
 */
function threebl_micro_list_theme()
{
    $themes = array(
        'listing-form'                => array(
            'template'  => 'templates/list_form',
            'arguments' => array(),
        ),

        'email-list'                  => array(
            'template'  => 'templates/email_list',
            'arguments' => array(),
        ),

        'email-form'                  => array(
            'template'  => 'templates/email_form',
            'arguments' => array(),
        ),

        'client-listing-form'         => array(
            'template'  => 'templates/client_list_form',
            'arguments' => array(),
        ),

        'client-list'                 => array(
            'template'  => 'templates/client_list',
            'arguments' => array(),
        ),

        'client-email-list'           => array(
            'template'  => 'templates/client_email_list',
            'arguments' => array(),
        ),

        'client-email-list-form'      => array(
            'template'  => 'templates/client_email_list_form',
            'arguments' => array(),
        ),

        '3bl-micro-list'              => array(
            'template'  => 'templates/3bl_micro_list',
            'arguments' => array(),
        ),
        'view-client-micro-list-ajax' => array(
            'template'  => 'templates/view_client_micro_list_ajax',
            'arguments' => array(),
        ),
        'view-micro-list-report' => array(
            'template' => 'templates/view-micro-list-report',
            'arguments' => array(),
        ),

    );
    return $themes;
}

/**
 * Function for getting the client list form
 *
 * @return string
 */
function fnManageListForm()
{
    #Include required class files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    #Check Admin Session
    $objCustomEmailList->fnCheckSession(1);

    #Get the Max uploading user limit
    $intMaxUserLimit = $objCustomEmailList->fnGetMaxUploadUserLimit("3bl_micro_list");

    //Checking the post data
    if (isset($_POST['submitList'])) {
        $arrListValue = $_POST;
        $arrFileValue = $_FILES;

        # Set POST values in session
        $_SESSION['microList']['title'] = trim($_POST['title']);
        $_SESSION['microList']['details'] = trim($_POST['details']);


        $intOgId = 0;
        //Add functionality of form
        $intStatusMessage = $objCustomEmailList->fnAddAdminClientList($arrListValue, $arrFileValue, 0, $intOgId);
        if ($intStatusMessage == 5) {

            drupal_set_message("The maximum number of contacts per list is " . $intMaxUserLimit . ". If you have a need for more than " . $intMaxUserLimit . " in a list, please contact your media consultant. Thank you.", "error");
        } elseif ($intStatusMessage == 2) {
            drupal_set_message("Your list, " . trim($_POST['title']) . ", has been added successfully");
        } elseif ($intStatusMessage == 4) {
            drupal_set_message("Records in the uploaded file are not in proper format . Please check sample CSV or Xls files", "error");
        }
        drupal_goto('admin/3bl-micro-list');
    }
    //end of post

    #File not readable redirect to same page with error message.
    if (isset($_SESSION['microList']['read']) && $_SESSION['microList']['read'] != "") {
        $strMessage = $_SESSION['microList']['read'];

        if (isset($_SESSION['microList']['title']) && $_SESSION['microList']['title'] != "") {
            $strListTitle = $_SESSION['microList']['title'];
        }

        if (isset($_SESSION['microList']['details']) && $_SESSION['microList']['details'] != "") {
            $strListDetails = $_SESSION['microList']['details'];
        }

        unset($_SESSION['microList']['title']);
        unset($_SESSION['microList']['details']);

        drupal_set_message($strMessage, "error");
    }
    unset($_SESSION['microList']['read']);

    #Include Required JS and css files
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/jquery-latest.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine-en.js');
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/validator/validationEngine.jquery.css');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/glowtabs.css');
    
    $arrListData = array('strListTitle'  => $strListTitle, 'strListDetails'=> $strListDetails, "intMaxUserLimit"=> $intMaxUserLimit);

    return theme('listing-form', $arrListData);
}

/**
 * Delete Email from particular list
 *
 * @param int $intListId  : List Id
 * @param int $intEmailId : Micro List entity Id
 */
function fnDeleteEmail($intListId, $intEmailId)
{
    #Include required class files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    #Check Admin Session
    $objCustomEmailList->fnCheckSession(1);

    if ($intListId < 1) {
        drupal_goto('/');
    }

    #Delete Email information
    $objCustomEmailList->fnDeleteEmailList($intListId, $intEmailId);

    // set flag in  session 1 for success message.
    $_SESSION['microList']['flag'] = 1;

    drupal_goto('admin/list/' . $intListId . '/');
}

/**
 * Add user email details using form
 *
 * @param int $intListId : List Id
 *
 * @return string
 */
function fnAddEmailByAdmin($intListId)
{
    #Include required class files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    #Check Admin Session
    $objCustomEmailList->fnCheckSession(1);

    if ($intListId < 1) {
        drupal_goto('/');
    }

    //Checking the post data
    if (isset($_POST['submitEmail'])) {
        $arrPostData = $_POST;
        #Add Admin and Client email to database
        $intMessage = $objCustomEmailList->fnAddEmail($arrPostData, $intListId);

        // set falg in  session 1 for success message.
        $_SESSION['microList']['flag'] = $intMessage;
        drupal_goto('admin/3bl_micro_list/' . $intListId . '/');

    }
    //end of post

    // To get the id name of the list
    $arrListDetails = entity_load("micro_list", array($intListId));
    $strListName = stripslashes($arrListDetails[$intListId]->title);
    $arrListData = array('listName'=> $strListName);

    #Include Required JS and css files
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/jquery-latest.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine-en.js');
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/validator/validationEngine.jquery.css');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/glowtabs.css');

    return theme('email-form', $arrListData);
}

/**
 * Function for getting Client side list
 *
 * @return string
 */
function fnClientMicroList()
{
    #Include required files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    //Check Session
    $objCustomEmailList->fnCheckSession();

    global $base_url;

    #Get the company related information.
    $intCompanyOgId = $_SESSION['client_og']; //Company og
    $intCompanyNid = $_SESSION['client_og_nid']; // Company node id

    # For display success or error message.
    $intFlag = (int) $_SESSION['microList']['flag'];
    unset($_SESSION['microList']['flag']);

    //check massage if flag 1
    switch ($intFlag) {
        case 1:
            $intFlag = 1;
            $strMessage = 'Your email list has been removed successfully.';
            break;

        case 2:
            $intFlag = 2;
            # Get information about the total records as well as successfully added and skipped records from uploaded list.
            $strSubscriberStatus = $_SESSION['microList'][$intCompanyOgId];
            unset($_SESSION['microList'][$intCompanyOgId]);

            $strMessage = 'Your list has been added and should be in the list, below.' . $strSubscriberStatus;
            break;

        case 3:
            $intFlag = 3;
            $strMessage = 'Your email list has been successfully updated.';
            break;

        case 4:
            $intFlag = 4;
            $strMessage = 'Records in the uploaded file are not in the proper format. Please check sample CSV or Xls files for the correct format.  And/or contact your media consultant for assistance.  Thank you!';
            break;

        case 5:
            $intFlag = 5;
            #Get the Max uploading user limit
            $intMaxUserLimit = $objCustomEmailList->fnGetMaxUploadUserLimit("client_micro_list");
            $strMessage = "The maximum number of contacts per list is " . $intMaxUserLimit . ". If you have a need for more than " . $intMaxUserLimit . " in a list, please contact your media consultant. Thank you.";
            break;

        default:
            $intFlag = 0;
            $strMessage = '';

    }
    //end switch case

    #Include necessary JS and CSS files
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');


    #Manage all pagination related parameters
    $intLimit = 25;
    $intNext = 0;
    $intPage = 1;
    $intPrev = 0;
    $intStart = 0;
    $strType = 'client';

    //Get all client micro list of Particular Company
    list($objArrList, $intTotalRecords) = $objCustomEmailList->fnGetListByCompanyId($intCompanyOgId, 2, $intStart, $intLimit, $strType, "");

    #Calculate total number of pages.
    $intNumPages = ceil($intTotalRecords / $intLimit);
    if ($intNumPages == $intPage) {
        $intNext = 1;
    }

    //check for 'previous' option in pagination
    if ($intPage == 1) {
        $intPrev = 1;
    }

    #Assign Values to pass HTML template
    $arrListData = array('arrList'=> $objArrList, 'strBaseUrl'=> $base_url, 'intFlag'=> $intFlag, 'strMessage'=> $strMessage, 'intCompanyNid'=> $intCompanyNid, 'intNext'=> $intNext, 'intPrev'=> $intPrev, 'intPage'=> $intPage, 'strType'=> $strType, 'intLastPage'=> $intNumPages);

    return theme('client-list', $arrListData);
}

/**
 * Client add and edit list form
 *
 * @param string $strListId : Base64 encode List Id
 *
 * @return mixed
 */
function fnManageClientListForm($strListId = "")
{
    #Include required files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    //Checking session exist or not
    $objCustomEmailList->fnCheckSession();

    global $base_url;

    #Get Company Ids from session
    $intCompanyNid = $_SESSION['client_og_nid'];
    $intCompanyOgId = $_SESSION['client_og']; // Company node id

    //Get List id
    $intListId = (int) ($strListId != "") ? base64_decode($strListId) : 0;

    $strListTitle = '';
    $strListDetails = '';

    //if edit form details
    if ($intListId > 0) {

        //Checking is it client list or not.
        $objCustomEmailList->fnCheckCountListId($intListId);

        //Getting list title and details by edit id
        $arrListDetails = entity_load("micro_list", array($intListId));
        $strListTitle = stripslashes($arrListDetails[$intListId]->title);
        $strListDetails = stripslashes($arrListDetails[$intListId]->field_email_list_details["und"][0]["value"]);
    }

    if (isset($_POST['submitList'])) {
        $arrListValue = $_POST;
        $arrFileValue = $_FILES;

        //Add functionality of form
        $strValidateFormFields = ($intListId > 0) ? $objCustomEmailList->fnValidateAddListFormData($_POST) : $objCustomEmailList->fnValidateAddListFormData($_POST, $_FILES);

        if ($strValidateFormFields != "") {
            $strListTitle = $_POST['title'];
            $strListDetails = $_POST['details'];
            //check massage if flag 1
            $intFlag = 5;
            $strMessage = $strValidateFormFields;

        } else {
            $strListTitle = $_POST['title'];

            # Set POST values in session
            $_SESSION['microList']['title'] = $_POST['title'];
            $_SESSION['microList']['details'] = $_POST['details'];

            $intListId = $objCustomEmailList->fnAddAdminClientList($arrListValue, $arrFileValue, $intCompanyNid, $intCompanyOgId, $intListId);
            if ($intListId == 0) {
                $_SESSION['microList']['flag'] =  "2";
            } elseif ($intListId == 2) {
                $_SESSION['microList']['flag'] = 2;
                $_SESSION['microList'][$intCompanyOgId] = $_SESSION['microList'][$strListTitle];
                unset($_SESSION['microList'][$strListTitle]);

                #Include module to use the sendmail function
                module_load_include('inc', 'threebl_analytics_reports', 'inc/sendEmail');

                $objArrCompanyDetails = node_load($intCompanyNid);
                $strCompanyName = $objArrCompanyDetails->title;

                #sender details name
                $strTo = "microlist@3blmedia.com";
                $strSendName = "3blmedia Team";
                $strSendEmail = "noreply@3blmedia.com";

                #Email Message
                $strFinalEmailMessage = "Micro List Name: " . $strListTitle;
                $strFinalEmailMessage .= "<br />Company Name: " . $strCompanyName;
                $strFinalEmailMessage .= "<br />Added Date: " . date("d F Y");

                //Send Email to Consult Team
                fnSendEmail($strSendName, $strSendEmail, $strTo, $strSubject = $strListTitle . " micro list added", $strFinalEmailMessage);

            } elseif ($intListId == 5) {
                $_SESSION['microList']['flag'] = 5;
            } elseif ($intListId == 4) {
                $_SESSION['microList']['flag'] = 4;
            } else {
                $_SESSION['microList']['flag'] = 3;
            }

            drupal_goto('Dashboard/ClientMicroList/');
        }

    }
    //end of post

    #File not readable redirect to same page with error message.
    if (isset($_SESSION['microList']['read']) && $_SESSION['microList']['read'] != "") {
        $strMessage = $_SESSION['microList']['read'];

        if (isset($_SESSION['microList']['title']) && $_SESSION['microList']['title'] != "") {
            $strListTitle = $_SESSION['microList']['title'];
        }

        if (isset($_SESSION['microList']['details']) && $_SESSION['microList']['details'] != "") {
            $strListDetails = $_SESSION['microList']['details'];
        }

        unset($_SESSION['microList']['title']);
        unset($_SESSION['microList']['details']);

        $intFlag = 6;
    }
    unset($_SESSION['microList']['read']);

    #Get the Max uploading user limit
    $intMaxUserLimit = $objCustomEmailList->fnGetMaxUploadUserLimit("client_micro_list");

    # Include necessary JS and CSS
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/validator/validationEngine.jquery.css');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/glowtabs.css');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/jquery-latest.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine-en.js');
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');

    $arrListData = array('intListId'   => $intListId, 'strBaseUrl'=> $base_url, 'strListTitle'=> $strListTitle, 'strListDetails'=> $strListDetails, 'intFlag'=> $intFlag, 'strMessage'  => $strMessage, "intMaxUserLimit"=> $intMaxUserLimit);

    return theme('client-listing-form', $arrListData);
}

/**
 * Function for crating the view of Email list using particular list-id
 *
 * @param int $intListId : List Id
 *
 * @return string
 */
function fnViewEmailList($intListId = 0)
{
    #Include required files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    //Check Session
    $objCustomEmailList->fnCheckSession(1);

    if ($intListId < 1) {
        drupal_goto('admin/3bl-micro-list');
    }

    $strURLPath = "/admin/3bl_micro_list/";
    $intFlag = $_SESSION['microList']['flag'];
    unset($_SESSION['microList']['flag']);
    //check massage if flag 1
    switch ($intFlag) {
        case 1:
            $intFlag = 1;
            $strMessage = 'The entry was successfully removed.';
            break;

        case 2:
            $intFlag = 2;
            $strMessage = 'The entry was successfully added.';
            break;

        case 3:
            $intFlag = 3;
            $strMessage = 'This email address already exists in this list.';
            break;

        case 5:
            $intFlag = 3;

            #Get the Max uploading user limit
            $intMaxUserLimit = $objCustomEmailList->fnGetMaxUploadUserLimit("3bl_micro_list");
            $strMessage = "The maximum number of contacts per list is " . $intMaxUserLimit . ". If you have a need for more than " . $intMaxUserLimit . " in a list, please contact your media consultant. Thank you.";
            break;

        default:
            $intFlag = 0;
            $strMessage = '';

    }//end switch case

    global $base_url;

    $strSQL = '';
    $intLimit = 100;
    $intStart = 0;

    //array for order
    $arrSort = array(
        'name'   => 'asc',
        'title'  => 'asc',
        'mail'   => 'asc',
    );

    //Checking Get method value for order of query.
    if (isset($_GET['order']) && $arrSort[$_GET['order']] != "") {
        $strSQL .= " ORDER BY " . $_GET['order'] . " " . $_GET['sort'];
        $arrSort[$_GET['order']] = ($_GET['sort'] == 'asc') ? 'desc' : 'asc';
    } else {

        $strSQL .= " ORDER BY us.mail ASC ";
    }

    //Checking Get method value for page value.
    if (isset($_GET['page']) && (int) ($_GET['page']) > 0) {
        $intStart = $intLimit * ($_GET['page'] - 1);
    }

    $strSQL .= " LIMIT " . $intStart . "," . $intLimit;

    #Include required files
    module_load_include('inc', 'threebl_micro_list', 'inc/pagination');

    // post value for delete form.
    if (isset($_POST['delete'])) {
        $arrPostData = $_POST;
        $arrEmailId = $arrPostData['emailid'];
        // email-id
        if (!empty($arrEmailId)) {
            $objCustomEmailList->fnDeleteEmailList($intListId, $arrEmailId);
        }
        //if email id
        $_SESSION['microList']['flag'] = 1;
        drupal_goto('admin/3bl_micro_list/' . $intListId . '/');

    }
    //end of post

    //Function for Count all the list email number
    $intCountEmail = $objCustomEmailList->fnEmailList($intListId, 1, '', 1);

    //Pagination function.
    $strPage = fnGetPagerData($intCountEmail, $intLimit, $strTempAction = $base_url . $strURLPath . $intListId . "?");

    //function for getting email list
    $arrObjEmailList = $objCustomEmailList->fnEmailList($intListId, 0, $strSQL, 1);

    $arrListDetails = entity_load("micro_list", array($intListId));
    $strListTitle = stripslashes($arrListDetails[$intListId]->title);
    $strListType = stripslashes($arrListDetails[$intListId]->type);

    #Include Required JS and css files
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/jquery-latest.js');
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');

    $arrEmailList = array('strBaseUrl'  => $base_url, 'strSortUrl'=> $base_url . $strURLPath, 'arrEmailList'=> $arrObjEmailList, 'intListId'=> $intListId, 'arrSort'=> $arrSort, 'page' => $strPage, 'intFlag'=> $intFlag, 'strMessage'=> $strMessage, 'strListTitle'=> $strListTitle, 'strListType'=> $strListType);

    return theme('email-list', $arrEmailList);
}

/**
 *  Delete client list
 *
 * @param string $strListId :  Base64 encoded List Id
 */
function fnDeleteClientList($strListId = "")
{
    #Include required files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Check Session
    $objCustomEmailList->fnCheckSession();

    //Get List id
    $intListId = (int) ($strListId != "") ? base64_decode($strListId) : 0;

    if ($intListId < 1) {
        drupal_goto('Dashboard/ClientMicroList');
    }

    //Checking is it client list or not.
    $objCustomEmailList->fnCheckCountListId($intListId);
    //delete lis by listId
    $objCustomEmailList->fnDeleteListByClient($intListId);
    // set flag in  session 1 for success message.
    $_SESSION['microList']['flag'] = 1;

    drupal_goto('Dashboard/ClientMicroList/');
}

/**
 * Getting all the email of particular list of particular client
 *
 * @param int $intListId : List Id
 *
 * @return string
 */
function fnClientEmailList($intListId)
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    #Check Client Session
    $objCustomEmailList->fnCheckSession();

    global $base_url;
    $intListId = (int) base64_decode($intListId);

    //Checking is it client list or not.
    $objCustomEmailList->fnCheckCountListId($intListId);

    $intCompanyOgId = $_SESSION['client_og']; // Company group id.

    if (isset($_POST['delete'])) {

        $arrEmailId = $_POST['emailid'];

        // email-id
        if (!empty($arrEmailId)) {
            $intFlag = $objCustomEmailList->fnDeleteEmailList($intListId, $arrEmailId);
            $_SESSION['microList']['flag'] = $intFlag;
        }
    }

    //Capture Message flag and reset the flag variable
    $intFlag = (int) $_SESSION['microList']['flag'];
    unset($_SESSION['microList']['flag']);

    #Assign Message as per the given message flag
    switch ($intFlag) {
        case 1:
            $intFlag = 1;
            $strMessage = 'The entry was successfully removed.';
            break;

        case 2:
            $intFlag = 2;
            $strMessage = 'The entry was successfully added.';
            break;

        case 3:
            $intFlag = 3;
            $strMessage = 'This email address already exists in this list.';
            break;

        case 5:
            $intFlag = 5;

            #Get the Max uploading user limit
            $intMaxUserLimit = $objCustomEmailList->fnGetMaxUploadUserLimit("client_micro_list");
            $strMessage = "The maximum number of contacts per list is " . $intMaxUserLimit . ". If you have a need for more than " . $intMaxUserLimit . " in a list, please contact your media consultant. Thank you.";
            break;

        default:
            $intFlag = 0;
            $strMessage = '';

    }
  
    // Getting the list of Particular Company
    $objArrList = $objCustomEmailList->fnClientEmailListById($intListId, $intCompanyOgId);

    // To get the id name of the list
    $arrListDetails = entity_load("micro_list", array($intListId));
    $strListName = stripslashes($arrListDetails[$intListId]->title);
    $intListOwner = (int) stripslashes($arrListDetails[$intListId]->field_client_micro_list_owner["und"][0]["value"]);

    $arrListData = array('arrList' => $objArrList, 'intListId'=> $intListId,
                         'strPage' => theme('pager', array('tags' => array())), 'strBaseUrl'=> $base_url,
                         'listName'=> $strListName, 'intFlag'=> $intFlag, 'strMessage'=> $strMessage, 'intListOwner'=> $intListOwner,
                         'intOgId' => $intCompanyOgId);

    #Include Required JS and css files
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/jquery-latest.js');
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');
    return theme('client-email-list', $arrListData);

}

/**
 * delete email from list by client
 *
 * @param int $intListId  : List Id
 * @param int $intEmailId : Micro List entity Id
 */
function fnDeleteClientEmail($intListId, $intEmailId)
{
    #Include required files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Check Session
    $objCustomEmailList->fnCheckSession();
    //Checking is it client list or not.
    $objCustomEmailList->fnCheckCountListId((int) $intListId);
    $objCustomEmailList->fnDeleteEmailList((int) $intListId, (int) $intEmailId);
    drupal_goto('Dashboard/SubscriberList/' . (int) $intListId);
}

/**
 * Add user email details using form
 *
 * @param int $intListId :  List Id
 *
 * @return string
 */
function fnAddEmailByClient($intListId)
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Checking session
    $objCustomEmailList->fnCheckSession();

    global $base_url;
    $intListId = (int) base64_decode($intListId);

    //Checking is it client list or not.
    $objCustomEmailList->fnCheckCountListId($intListId);
    $intOgId = $_SESSION['client_og'];

    $strUserFirstName = '';
    $strUserLastName = '';
    $strUserEmailId = '';

    //Checking the post data
    if (isset($_POST['submitEmail'])) {
        $arrPostData = $_POST;
        $strValidateMessage = trim($objCustomEmailList->fnValidateSubscriber($arrPostData));
        if ($strValidateMessage != "") {
            $strUserFirstName = trim($_POST['fname']);
            $strUserLastName = trim($_POST['lname']);
            $strUserEmailId = trim($_POST['email']);
            //check massage if flag 1
            $intFlag = 4;
            $strMessage = $strValidateMessage;

        } else {
            // Adding flag for Client micro list to check subscriber limit.
            $intMessage = $objCustomEmailList->fnAddEmail($arrPostData, $intListId, 1);
            // set flag in  session 1 for success message.
            $_SESSION['microList']['flag'] = $intMessage;
            drupal_goto('Dashboard/SubscriberList/' . base64_encode($intListId));
        }
    }
    //end of post

    #Include Required JS and css files
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/jquery-latest.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine.js');
    drupal_add_js(drupal_get_path('theme', 'threebl') . '/js/validator/jquery.validationEngine-en.js');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/validator/validationEngine.jquery.css');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/glowtabs.css');
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');

    // To get the id name of the list
    $arrListDetails = entity_load("micro_list", array($intListId));
    $strListName = stripslashes($arrListDetails[$intListId]->title);

    $arrListData = array('intListId'     => $intListId, 'strBaseUrl'=> $base_url,
                         'listName'      => $strListName, 'strUserFirstName'=> $strUserFirstName, 'strUserLastName'=> $strUserLastName,
                         'strUserEmailId'=> $strUserEmailId,
                         'intFlag'       => $intFlag, 'strMessage'=> $strMessage);
    return theme('client-email-list-form', $arrListData);
}

/**
 * Change destination form after submit list.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * @return array|string
 */
function threebl_micro_list_form_alter(&$form, &$form_state, $form_id)
{

    if (!empty($form['entity'])) {

        $strListType = $form['entity']['#value']->type;

        if ($form_id == 'eck_entity_form_edit_micro_list_3bl_micro_list' || $strListType == '3bl_micro_list') {
            $form['#action'] .= '?destination=admin/3bl-micro-list';
        }

        if ($form_id == 'eck_entity_form_edit_micro_list_client_micro_list' || $strListType == 'client_micro_list') {
            $form['#action'] .= '?destination=admin/client-micro-list';
        }

    }
    if ($form_id == 'fmr_node_form') {
        $path = drupal_get_path('module', 'threebl_micro_list');
        $form['#attached']['js'][] = $path . '/js/admin_micro_list.js';
    }

    if ($form_id == 'eck__entity__form_edit_micro_list_3bl_micro_list' || $form_id == 'eck__entity__form_edit_micro_list_client_micro_list') {

        $form['group-audience-und-other-groups-input'] = array(
            '#type'          => 'checkbox',
            '#title'         => t('<b>Other Groups audience</b>'),
            '#description'   => t('Checked checkbox for selecting Other Group audience '),
            '#weight'        => 35,
            '#required'      => false,
            '#default_value' => 0,
        );

        $form['group-audience-und-my-groups-input'] = array(
            '#type'          => 'checkbox',
            '#title'         => t('<b>My Groups audience</b>'),
            '#description'   => t('Checked checkbox for selecting My Group audience'),
            '#weight'        => 35,
            '#required'      => false,
            '#default_value' => 0,
        );
        $arrOtherGroup = array_map(ucfirst, $form['group_audience']['und']['other_groups']["#options"]);
        $arrMyGroup = array_map(ucfirst, $form['group_audience']['und']['my_groups']["#options"]);

        $form['group_audience']['und']['my_groups']["#options"] = $arrMyGroup;
        $form['group_audience']['und']['other_groups']["#options"] = $arrOtherGroup;

        asort($form['group_audience']['und']['my_groups']["#options"]);
        asort($form['group_audience']['und']['other_groups']["#options"]);

        $path = drupal_get_path('module', 'threebl_micro_list');
        $form['#attached']['js'][] = $path . '/js/admin_micro_list.js';
    }
    return $form;
}

/**
 * This is entity delete hook. Delete entry of synchronize table.
 *
 * @param object $entity : Entity Object
 */
function threebl_micro_list_entity_delete($entity)
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Checking session
    $objCustomEmailList->fnCheckSession();

    $arrEntity = json_decode(json_encode($entity), 1); //entity object
    $strEntityType = $arrEntity['entity_type']; //entity type

    if ($strEntityType == 'micro_list') {
        #Include required class files
        module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
        $intEntityId = (int) $arrEntity['etid'];
        //creating object of class
        $objCustomEmailList = new customEmailList();
        //Delete list record from synchronize table
        $objCustomEmailList->fnDeleteEmailList($intEntityId);

    }
}

/**
 * Function for sending FMR details (HTML) to particular custom list when publish.
 */
function fnDistributeFMRToCustomList()
{
    #Include required class files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Send FMR Html
    $objCustomEmailList->fnSendFMRToCustomList();
}

/**
 * Function download samples format files for micro list.
 *
 * @param string $strArg : File Type xls or csv
 */
function fnDownloadSampleEmailList($strArg)
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();

    global $base_url;
    //Contain the argument from url and assign the value
    // Value either be xls  or csv
    $strDownloadFileType = $strArg;
    //Download request for excel or csv.
    $strFileSourcePath = $base_url . "/sites/all/modules/custom_modules/threebl_micro_list/inc/FMRList." . $strDownloadFileType;

    header('Content-Description: File Transfer');
    header("Content-type: text/csv");
    header("Content-Disposition: attachment; filename=FMRList" . time() . "." . $strDownloadFileType);
    header('Content-Transfer-Encoding: binary');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Content-Length: ' . filesize("$strFileSourcePath"));
    ob_clean();
    flush();
    readfile("$strFileSourcePath");
    exit;
}

/**
 * Function list-out all micro list assigned by admin and whose owner is other than login client.
 *
 * @return mixed
 */
function fn3BLMicroList()
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Checking session
    $objCustomEmailList->fnCheckSession();

    global $base_url;

    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');
    //check massage if flag 1
    $intOgId = $_SESSION['client_og']; //Company Og Id
    //Get all client micro list of Particular Company
    list($objArrList,) = $objCustomEmailList->fnGetListByCompanyId($intOgId, 0);

    $arrListData = array('arrList'  => $objArrList, 'strPage'=> theme('pager', array('tags' => array())), 'strBaseUrl'=> $base_url);
    return theme('3bl-micro-list', $arrListData);
}

/**
 * Function to use the ajax pagination for client micro list
 */
function fnCustomListAjax()
{
    #Include required files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    //Check Session
    $objCustomEmailList->fnCheckSession();

    #Define variables
    $intPage = 0;
    $strSearchVal = "";

    #Assigned all posted values.
    if (isset($_POST['type'])) {
        $strType = $strPostType = $_POST['type']; // Micro list type
        $intPage = $_POST['page'] ? $_POST['page'] : 1; //Set default page number
        $strSearchVal = trim($_POST['searchKey']); //Used the search key value entred in the search box.
    }

    $intOgId = $_SESSION['client_og']; //Company Og id
    //Getting the list of Particular Company
    $intLimit = 25; //Set limit of MICRO LIST per page
    $intStart = ($intPage - 1) * $intLimit; //Calculate starting index of page

    $strFlag = "client"; // Micro list type flag
    #Get all client micro list of Particular Company
    list($objArrList, $intTotalRecords) = $objCustomEmailList->fnGetListByCompanyId($intOgId, 2, $intStart, $intLimit, $strFlag, $strSearchVal);

    $intNext = 0;
    $intPrev = 0;
    //check next option;
    $intNumPages = ceil($intTotalRecords / $intLimit);
    if ($intNumPages == $intPage) {
        $intNext = 1;
    }

    //check for last option
    if ($intPage == 1) {
        $intPrev = 1;
    }

    #Add CSS related files
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');
   
    $arrData = array('arrList'=> $objArrList, 'intNext'=> $intNext,  'intPrev'=> $intPrev, 'intPage'=> $intPage, 'strType'=> $strType, 'intLastPage'=> $intNumPages);
    echo theme('view-client-micro-list-ajax', $arrData);
}

/**
 * function return list of all active client for Ajax [used at admin functionality]
 */
function fnActiveClientAjax()
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Checking session
    $objCustomEmailList->fnCheckSession(1);

    //Getting all active company
    $arrActiveCompany = json_encode($objCustomEmailList->fnGetAllActiveClient());
    echo $arrActiveCompany;
}

/**
 * Function to get client Micro List by ajax
 */
function fnGetClientMicroListsAjax()
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
    //Create the object of class
    $objCustomEmailList = new customEmailList();
    //Checking session
    $objCustomEmailList->fnCheckSession();

    $intFlag = (int) $_POST['intflag'];
    $intOgId = $_SESSION['client_og']; //Client Og Id

    //Get all client micro list of Particular Company
    list($objArrList,) = $objCustomEmailList->fnGetListByCompanyId($intOgId, $intFlag);

    $arrAllMicroListArray = array();
    foreach ($objArrList as $row) {
        $arrAllMicroListArray[] = $row->id;
    }
    $arrClientList = json_encode($arrAllMicroListArray);
    echo $arrClientList;
}

/**
 * Function to track the fmr view and clicks.
 */
function fnTrackFmr()
{
    if (!empty($_GET)) {
        #Include necessary files
        module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');
        //Create the object of class
        $objCustomEmailList = new customEmailList();

        #Prepare array to insert data into the database.
        $arrFMRView = array();

        //Getting token having encode array value
        $strToken = base64_decode($_GET['token']);

        if ($strToken != '') {
            //parse Url
            parse_str($strToken, $arrTokenFMRClick);

            if (!empty($arrTokenFMRClick['mediaid'])) {
                //Take array for multipal fmr Id's
                foreach (($arrTokenFMRClick['mediaid']) as $intMediaId) {
                    $arrFMRView['userid'] = (int) $arrTokenFMRClick['id'];
                    $arrFMRView['list_id'] = (int) $arrTokenFMRClick['listid']; // FMR List Id
                    $arrFMRView['tracking_flag'] = 'open'; // Tracking flag click : click FMR
                    $arrFMRView['action_date'] = $arrTokenFMRClick['date']; // Assign current date
                    $arrFMRView['fmr_nid'] = (int) $intMediaId;

                    //Checking duplicate entry exist or not.
                    $intRowCount = $objCustomEmailList->fnCheckFmrTrackValue($arrFMRView);

                    if ($intRowCount < 1) {
                        //Function for insert tracking details for view
                        $objCustomEmailList->fnInsertFmrUpdateTracking($arrFMRView);
                    }
                }
            }
        }
    }
}

/**
 * Function for tracking click of FMR Updates
 */
function fnTrackFmrClicks()
{
    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    #Prepare array to insert data into the database.
    $arrFMRClick = array();
    //Getting token having encode array value
    $strToken = base64_decode($_GET['token']);

    if ($strToken != '') {
        //parse Url
        parse_str($strToken, $arrTokenFMRClick);
        $arrFMRClick['userid'] = (int) ($_GET['id'] != "") ? json_decode(base64_decode($_GET['id'])) : $arrTokenFMRClick['id'];
        if ($arrFMRClick['userid'] >0) {
            $intMediaId = ($_GET['action'] != '') ? base64_decode($_GET['action']) : $arrTokenFMRClick['mediaid'][0];
            $arrFMRClick['list_id'] = (int) $arrTokenFMRClick['listid']; // FMR List Id
            $arrFMRClick['tracking_flag'] = 'click'; // Tracking flag click : click FMR
            $arrFMRClick['action_date'] = date("Y-m-d h:i:s"); // Assign current date
            $arrFMRClick['fmr_nid'] = (int) $intMediaId;

            //Function for insert tracking details for click
            $objCustomEmailList->fnInsertFmrUpdateTracking($arrFMRClick);
        }
    }
    drupal_goto($_GET['url']);
}

/**
 * Function to list out FMRs which were using 3BL Micro List between specific period of duration.
 * @param string $strPageAction : Page Action
 * @return mixed
 */
function fnGetMicroListReport($strPageAction)
{
    global $base_url, $conf;

    #Include necessary files
    module_load_include('inc', 'threebl_micro_list', 'inc/clsMicroList');

    //Create the object of class
    $objCustomEmailList = new customEmailList();

    // Initialize parameters
    $strErrorMessage = "";
    $strGetEndDate = date('Y-m-d');
    $intPage = 0;
    $strGetStartDate = date('Y-m-d', strtotime(date("Y-m-d", strtotime($strGetEndDate)) . " -30 days"));

    // Get List Type
    $strListType = "3bl";
    $strMicroListName = "3BL Micro List Report";
    if ($strPageAction == "Client-Micro-List-Report") {
        $strListType = "client";
        $strMicroListName = "Client Micro List Report";
    }

    // Check Get values
    if (isset($_GET['startdate'])) {
        $strGetStartDate = trim($_GET['startdate']);
        $strDownloadExcel = trim($_GET['dwn']);
        $strGetEndDate = trim($_GET['enddate']);
        $strGetOrder = trim($_GET['status']);
        $strSortBy = trim(($_GET['sort'] != "") ? $_GET['sort'] : "date");
        $intPage = $_GET['page'] ? $_GET['page'] : 1;

        $strErrorMessage = "";
        //start and end date validation
        if ($strGetStartDate == "" || $strGetEndDate == "") {
            $strErrorMessage .= "Please give exact dates to generate the report";
        } else {

            // Validate date format
            $strStartDateError = $objCustomEmailList->fnValidateDateFormat($strGetStartDate);
            $strEndDateError = $objCustomEmailList->fnValidateDateFormat($strGetEndDate);

            //start and end date validation
            $intValidDate = 1;
            if ($strStartDateError == "error" || $strEndDateError == "error") {
                $strErrorMessage .= "Please enter valid date<br />";
                $intValidDate = 0;
            }

            // check start date condition
            if (strtotime($strGetStartDate) > strtotime($strGetEndDate) && $intValidDate == 1) {
                $strErrorMessage .= "Please enter valid start date <br />";
            }

            // Check Sort order
            if ($strGetOrder != "DESC" && $strGetOrder != "ASC") {
                $strGetOrder = "DESC";
            }

            // Check sort by field name
            $strSortCondition = "PD.field_fmr_date_time_value $strGetOrder";
            if ($strSortBy == "name") {
                $strSortCondition = "og.label $strGetOrder";
            }

            $intLimit = 100; //Set limit of MICRO LIST per page
            $intStart = ($intPage - 1) * $intLimit; //Calculate starting index of page

            $arrResult = array();
            $arrMicroList = array();
            //Check if not error
            if ($strErrorMessage == "") {
                //to get the fmr details which associate to micro list.
                list($arrResult, $intTotalRecords, $arrMicroList) = $objCustomEmailList->fnGetFMRDetails($strGetStartDate, $strGetEndDate, $intStart, $intLimit, $strSortCondition, $strDownloadExcel, $strListType);
            }
        }

        drupal_set_message($strErrorMessage, "error");

        //check order by value and set opposite value to url
        if ($strGetOrder == "DESC") {
            $strNextStatus = "ASC";
        } else {
            $strNextStatus = "DESC";
        }

        # Add Pagination attributes.
        //Getting the list of Particular Company
        $intNext = 0;
        $intPrev = 0;
        //check next option;
        $intNumPages = ceil($intTotalRecords / $intLimit);

        if ($intNumPages == $intPage) {
            $intNext = 1;
        }

        //check for last option
        if ($intPage == 1) {
            $intPrev = 1;
        }
    }

    #Include necessary JS file
    drupal_add_js(drupal_get_path('module', 'threebl_micro_list') . '/js/micro_list.js');

    #Include Required JS and css files
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/microlist.css');
    drupal_add_css(drupal_get_path('theme', 'threebl') . '/css/glowtabs.css');

    // Template variables
    $arrData = array('arrList' => $arrResult, 'errorMessage' => $strErrorMessage, 'current_order' => $strGetOrder, "intStartDate" => $strGetStartDate, "intEndDate" => $strGetEndDate, "next_status" => $strNextStatus, 'intNext' => $intNext, 'intPrev' => $intPrev, "intPage" => $intPage, 'intLastPage' => $intNumPages, "base_url" => $base_url, "sortby" => $strSortBy, "imagepath" => $conf['IMAGES_PATH_3BL'], "download" => $strDownloadExcel, "arrMicroList" => $arrMicroList, "strPageAction" => $strPageAction, "strMicroListName" => $strMicroListName);

    // check condition to download excel file report or set variables to template
    if ($strDownloadExcel == "excel") {
        // Download report in excel file
        header("Content-Type: application/vnd.ms-excel;");
        header("Content-type: application/x-msexcel;");
        header("Content-disposition: attachment; filename=$strPageAction" . time() . ".xls");

        echo theme('view-micro-list-report', $arrData);
        exit;
    } else {
        return theme('view-micro-list-report', $arrData);
    }
}

